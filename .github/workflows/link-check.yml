# リンクチェックを実行するCI
name: Link check CI

on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RESULT_FILE: link-check-result.md

    steps:
      - uses: actions/checkout@v2

      # Gitの初期設定
      - name: Git setting
        run: sh .github/scripts/git_settings.sh
        env:
          REPOSITORY_OWNER: ${{ github.repository_owner }}
          REPOSITORY_OWNER_EMAIL: ${{ secrets.REPOSITORY_OWNER_EMAIL }}
      
      # Node.js セットアップ
      # LTSの最新は14系なのでとりあえずそれで指定
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      # 必要なパッケージのインストール
      - name: Install dependencies
        run: npm ci

      # 実行テスト
      # バージョンが変わったときのためにこの出力は残しておくか
      - name: Print version
        run: |
          npx blc --version

      # 結果ファイルやIssueに使う日付文字列の作成
      # https://stackoverflow.com/questions/60942067/get-current-date-and-time-in-github-workflows
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M:%S(%z)')"

      # リンクチェック実行
      # grepのヒット数が0件だとワークフローがエラーで止まってしまうので
      # ちょっと無駄かもですがif文を挟んでヒットするかチェックするようにしています
      - name: Exec link-check
        id: linkCheck
        run: |
          set +e
          status=0
          touch $RESULT_FILE
          echo "---" > $RESULT_FILE
          echo "Checked_date: ${{ steps.date.outputs.date }}" > $RESULT_FILE
          echo "---" >> $RESULT_FILE
          echo >> $RESULT_FILE
          echo >>
          while read url
          do
            npx blc -gi --requests 1 --user-agent "Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Mobile/15E148 Safari/604.1" --filter-level 0 "$url" > tmp.txt || {
              status=$?
              echo "Fail {$status}"
              echo "Target {$url}"
              echo \## Getting links from "$url" >> $RESULT_FILE
              cat tmp.txt | grep 'BROKEN' >> $RESULT_FILE
              cat tmp.txt | grep 'ERROR' --ignore-case >> $RESULT_FILE
              echo "-----------------------" >> $RESULT_FILE
              echo >> $RESULT_FILE

              # BROKEN がなくてもエラーになるケースが稀にある
              # Actions上に表示してデバッグするためcatする
              cat tmp.txt
            }
          done < post-list.txt
          echo "status {$status}"
          echo "::set-output name=status::$status"

      # 結果はActions上だと見にくかったのでファイルで残しておく
      # 最新の結果さえあれば良いので同じファイルを更新していく
      # historyはGithubで確認できるので十分
      - name: Commit result
        run: |
          git add $RESULT_FILE
          git commit -m "Update $RESULT_FILE"
          git push

      # リンクチェックの結果次第でIssueを発行する
      # メール通知してくれるので exit 1 も残しています。
      - name: Create Issue
        run: |
          node .github/scripts/create-issue.js
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.BLC_ACCESS_TOKEN }}
          TARGET_REPO: ${{ secrets.BLOG_REPOSITORY }}
          CURRENT_DATE: ${{ steps.date.outputs.date }}
        if: steps.linkCheck.outputs.status != 0
